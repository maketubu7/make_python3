machine learning

1、数据
    data set 数据集
    sample 样本
    feature 特征
    label 标记
    feature space 特征空间
    图像 每一个像素点都是特征
2、机器学习的基本任务（监督学习）
    1、分类任务
        二分类
            相近物体识别
        多分类
            数字识别 图像识别 信用卡风险判别
        多标签分类
            图像内容识别分类
        一些算法只支持二分类任务，但是多分类任务可以转换为二分类任务
        有一些算法天然可以完成多分类任务
    2、回归任务
        结果是一个连续数字的值，而非一个类别
        一些算法只能解决回归问题，一些只能解决分类问题，一些二者都能解决
        在一些情况下，回归任务可以简化为分类任务
3、机器学习的分类
    1、监督学习
        给机器学习的训练数据拥有标记或者答案
    2、非监督学习
        定义 - 给机器学习的训练数据没有任何标记或者答案
        对没有标记的数据进行分类 - 聚类分析
        对数据进行降维处理(意义：方便可视化)
            特征提取
            特征压缩： PCA
        意义-异常检测
    3、半监督学习
        定义 - 一部分数据有标记或者答案，另一部分没有
        通常使用无监督学习手段对数据做处理，之后使用监督学习处理
    4、增强学习
        定义 - 根据周围环境的情况，采取行动，根据采取行动的结果，学习行动方式

4、机器学习的其他分类
    1、批量学习 batch learning
    2、离线学习 offline learning
    3、在线学习 online learning

    4、参数学习
        一旦学习到了参数，就不在需要原有的数据集（线性回归）
    5、非参数学习
        不对模型进行过多假设，但是非参数不等于没参数

    奥卡姆的剃刀-简单的就是好的
    没有免费的午餐定理
    可以严格的数学推导出 任意两个算法
    他们的期望性能是相同的

5、numpy的简单使用
    1、创建数据
    np.zeros(10,dtype=int)  长度为10的，值为0的向量
    np.zeros(shape=(3,5),dtype=int)  3行5列的全是0的矩阵
    np.ones()同理

    np.full(fill_value=666,shape=(3,5)) 3行5列的全是666的矩阵

    np.arange(0,20,2) 左闭右开步长为2的向量
    np.arange(10) 1-10的向量

    np.linspace(0,20,10) 左闭右闭的区间，切出10个间距相等的数 array([ 0.        ,  2.22222222,  4.44444444,  6.66666667,  8.88888889,
       11.11111111, 13.33333333, 15.55555556, 17.77777778, 20.        ])

    np.linspace(0,20,11) array([ 0.,  2.,  4.,  6.,  8., 10., 12., 14., 16., 18., 20.])

    np.random.randint(0,10) 10 左闭右开 随机取0-10的随机数
    np.random.randint(4,8,size=10) 左闭右开 随机取4-8的随机数 取10个
    np.random.randint(4,8,size=(3,5)) 左闭右开 随机取4-8的随机数 取3行5列的矩阵

    np.random.seed(666)  设置随机显示设置，则随机的概率一直
    np.random.random()  生成0-1的随机浮点数
    np.random.random((3,5)) 生成0-1的随机浮点数 取3行5列的矩阵

    np.random.normal(10,100) 生成均值为10 方差为100的数
    np.random.normal(0,1，size=(3,5)) 生成均值为0 方差为1的数的3行5列的矩阵

    2、array的基本操作

    x = np.arange(10).reshape(2,5)  重分为2行5列的矩阵
    x.ndim  返回为x的维度
    x.shape  返回x的行列
    x.size  返回x的大小

    x[0] 返回向量中索引0的元素
    X[0,1] 返回矩阵的 0行1列的元素
    x[0:5] 向量的切片 返回左闭右开的索引对应的元素
    x[::2] 返回步长为2的向量
    x[::-1] 返回倒序的向量

    X[:2,:3] 返回数组的前2行的前3列
    X[:2,::2] 前2行，间隔为2的去取列
    X[::-1,::-1] 全部倒序重新排列
    sub_x = X[:2,:3].copy()
    全矩阵的子矩阵若被修改，则全矩阵也会被修改，若想重新复制，则调用copy方法
    X.reshape(10,-1) 重新分为10行，多少列自己计算，但是必须被10整除

    3、合并操作
    x = np.array([1,2,3])
    y = np.array([1,2,3])
    np.concatenate([x,y]) axis为控制方向

    np.vstack([x,y]) 垂直方向上的合并
    np.hstack([x,y]) 在水平方向上的合并

    4、分割操作
    np.split(x,[3,7])  3,7为分割点
    np.split(X,[2],axis=1) 按列进行分割

    np.vspilt(X,[2])  垂直分割
    np.hspilt(X,[2])  水平分割

6、array的运算
    2 * x 为其中每个元素乘以2
    x / 2 结果为浮点数
    x // 2 结果为整数
    np.abs(x) 取绝对值
    np.cos(x) 取余弦函数
    np.exp(x)  e的幂次方
    np.sqrt(x) 开方
    np.power(3,x) 三次方
    np.log2(x) 以2为底的对数
    np.log10(x) 以10为底的对数

    A + B 对应元素相加
    A * B 每个元素相乘
    A / B 每个元素相除
    A.dot(B) 矩阵的乘数
    A.T 举证的转置

    np.tile(v,(2,2)) 在行上堆叠两次，列上堆叠两次

    np.linalg.inv(A) 求矩阵的逆（方阵）
    np.linalg.pinv(A) 求矩阵的伪逆矩阵

7、聚合运算
    np.sum(x) 求x的和
    np.min(x) 求最小值
    np.max(x) 求最大值

    np.sum(X,axis=1) 求每行的和，
    np.sum(X,axis=0) 求每列的和，
    np.prod(x) x中的每个元素相乘
    np.mean(x) x的平均值
    np.median(x) x的中位数

    np.percentile(b,q=50) 百分位数 q为百分之多少，百分之多少小于这个数 100为最大值，0为最小值，50为中位数

    np.var(x) 方差
    np.std(x) 标准差

8、排序索引的相关运算
    np.argmin(x)  返回最小值索引
    np.argmax(x)  返回最大值索引

    np.sort(X,axis=0) 按列排序 沿着行排序
    np.sort(X,axis=1)  按行排序 沿着列排序

    np.argsort(x) 排序，返回排序后的索引
    np.partition(x,4) 返回在索引位置为4的地方，前面的比他小，后面的比他大，那么索引4的位置就是第4大的位置
    np.argpartition(x,4) 同上返回相应的索引值
    np.partition(X,2,axis=1) 按行找到第二大的数
    np.partition(X,2,axis=0) 按列找到第二大的数













